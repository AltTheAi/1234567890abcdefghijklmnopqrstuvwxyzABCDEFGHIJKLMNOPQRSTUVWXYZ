name: VNC Server
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: '0 */5 * * *'  # Run every 5 hours

jobs:
  run-server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
          token: ${{ secrets.FINE_GRAINED_PAT }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: '21'

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            fonts-dejavu-core \
            xterm \
            xarchiver \
            feh \
            htop \
            openbox \
            obconf \
            tint2 \
            xfce4-terminal \
            pcmanfm \
            tigervnc-standalone-server \
            tigervnc-common \
            neofetch \
            falkon \
            nano \
            vim \
            curl \
            python3

      - name: Install ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /usr/share/keyrings/ngrok-archive-keyring.asc >/dev/null
          echo "deb [signed-by=/usr/share/keyrings/ngrok-archive-keyring.asc] https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt-get update
          sudo apt-get install -y ngrok

      - name: Install filebrowser
        run: |
          curl -fsSL https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash

      - name: Setup environment and sync data
        env:
          FINE_GRAINED_PAT: ${{ secrets.FINE_GRAINED_PAT }}
          REPO: ${{ github.repository }}
        run: |
          # Configure git
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # Create or restore persist directory
          mkdir -p /home/runner/work/persist
          if [ -d "persist" ]; then
            cp -r persist/* /home/runner/work/persist/ 2>/dev/null || true
          fi
          
          # Setup directories
          mkdir -p ~/.vnc ~/.config/{pcmanfm/default,xfce4/terminal,tint2,openbox,ngrok}
          
          # VNC password
          echo '1234' | vncpasswd -f > ~/.vnc/passwd
          chmod 600 ~/.vnc/passwd
          
          # Download wallpaper
          mkdir -p ~/Pictures
          curl https://i.imgur.com/s5KMeNv.png -o ~/Pictures/wallpaper.png
          
          # PCManFM config
          echo '[*]
          wallpaper_mode=stretch
          wallpaper_common=1
          wallpaper=/home/runner/Pictures/wallpaper.png
          desktop_bg=#000000
          desktop_fg=#ffffff
          desktop_shadow=#000000
          desktop_font=Sans 12
          show_wm_menu=0
          sort=mtime;ascending;
          show_documents=0
          show_trash=1
          show_mounts=0' > ~/.config/pcmanfm/default/desktop-items-0.conf
          
          # Terminal config
          echo '[Configuration]
          FontName=DejaVu Sans Mono 12
          MiscDefaultGeometry=80x24' > ~/.config/xfce4/terminal/terminalrc
          
          # Tint2 config
          echo 'background_color = #000000 100
          panel_items = LTSC
          panel_size = 100% 30
          panel_position = bottom center horizontal
          taskbar_name = 1
          taskbar_name_padding = 4
          taskbar_name_background_id = 0
          taskbar_name_font = sans 9
          taskbar_mode = single_desktop
          taskbar_padding = 0 0 2
          task_maximum_size = 150 30
          task_padding = 2 2
          launcher_padding = 2 2
          launcher_icon_size = 24
          launcher_item_app = org.kde.falkon.desktop
          launcher_item_app = xfce4-terminal.desktop
          launcher_item_app = pcmanfm.desktop' > ~/.config/tint2/tint2rc
          
          # VNC startup script
          echo '#!/bin/bash
          xrdb $HOME/.Xresources
          xsetroot -solid grey
          export XKL_XMODMAP_DISABLE=1
          openbox-session &
          tint2 &
          pcmanfm --desktop &
          falkon --no-sandbox &
          xfce4-terminal &
          while true; do
             sleep 60
          done' > ~/.vnc/xstartup
          chmod +x ~/.vnc/xstartup
          
          # Openbox autostart
          echo '#!/bin/bash
          tint2 &
          pcmanfm --desktop &' > ~/.config/openbox/autostart
          chmod +x ~/.config/openbox/autostart
          
          # Configure filebrowser
          filebrowser config init
          filebrowser config set --address 0.0.0.0
          filebrowser config set --port 9090
          filebrowser config set --root /home/runner/work/persist
          filebrowser config set --auth.method=noauth
          filebrowser users add root 1234 --perm.admin
          
          # Configure ngrok
          echo "version: 2
          tunnels:
            vnc:
              proto: tcp
              addr: 5901
            filebrowser:
              proto: tcp
              addr: 9090
            minecraft:
              proto: tcp
              addr: 25565" > ~/.config/ngrok/ngrok.yml

      - name: Start services and sync data
        env:
          FINE_GRAINED_PAT: ${{ secrets.FINE_GRAINED_PAT }}
          REPO: ${{ github.repository }}
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          # Configure ngrok
          ngrok config add-authtoken $NGROK_AUTHTOKEN
          
          # Start VNC
          vncserver :1 -geometry 1280x800 -depth 24
          
          # Start filebrowser
          filebrowser -d /home/runner/.filebrowser.db &
          
          # Start ngrok (redirect output to a log file)
          ngrok start --all > ngrok.log 2>&1 &
          
          # Wait for ngrok to start and get URLs
          sleep 5
          echo "Tunnel URLs:"
          curl http://localhost:4040/api/tunnels | jq -r '.tunnels[].public_url'
          
          commit_and_push() {
            # Copy current state of persist directory
            mkdir -p persist
            cp -r /home/runner/work/persist/* persist/ 2>/dev/null || true
            
            git add persist/
            
            if ! git commit -m "Auto commit [no ci]"; then
              echo "No changes to commit"
              return 1
            fi
            
            for i in {1..3}; do
              if git push https://x-access-token:${FINE_GRAINED_PAT}@github.com/${REPO}.git HEAD:main --force; then
                echo "Push successful on attempt $i"
                return 0
              else
                echo "Push failed on attempt $i, retrying..."
                git pull --rebase
              fi
            done
            
            echo "Failed to push after 3 attempts"
            return 1
          }
          
          delete_old_workflows() {
            workflow_ids=$(curl -s -H "Authorization: token $FINE_GRAINED_PAT" \
              "https://api.github.com/repos/${REPO}/actions/runs" | \
              jq '.workflow_runs[] | select(.head_commit.message | contains("[no ci]")) | .id')
            
            for id in $workflow_ids; do
              echo "Deleting workflow run $id"
              curl -s -X DELETE -H "Authorization: token $FINE_GRAINED_PAT" \
                "https://api.github.com/repos/${REPO}/actions/runs/$id"
            done
          }
          
          create_new_workflow() {
            curl -X POST -H "Authorization: token $FINE_GRAINED_PAT" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${REPO}/actions/workflows/vnc-server.yml/dispatches" \
              -d '{"ref":"main"}'
            echo "New workflow run created"
          }

          START_TIME=$(date +%s)
          
          while true; do
            commit_and_push || true
            delete_old_workflows || true
            
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
            
            if [ $ELAPSED_TIME -ge 18000 ]; then
              echo "Workflow has been running for 5 hours."
              create_new_workflow || true
              exit 0
            fi
            
            echo $(date +%s%N | sha256sum)
            sleep 30
          done

      - name: Rerun workflow if failed
        if: failure()
        env:
          FINE_GRAINED_PAT: ${{ secrets.FINE_GRAINED_PAT }}
          REPO: ${{ github.repository }}
        run: |
          curl -X POST -H "Authorization: token $FINE_GRAINED_PAT" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${REPO}/actions/workflows/vnc-server.yml/dispatches" \
            -d '{"ref":"main"}'
          echo "Workflow rerun triggered"
